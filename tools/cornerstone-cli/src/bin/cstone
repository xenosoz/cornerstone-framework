#!/usr/bin/env node

var fs = require( 'fs' );
var cp = require( 'child_process' );
var grunt = require( 'grunt' );
var _ = require( 'underscore' );
var pkg = require( '../package.json' );

function displayHelp() {
	
	grunt.log.writeln();
	grunt.log.writeln( ' Cornerstone CLI '.cyan.inverse + ' ver ' + pkg.version );
	grunt.log.writeln();

	grunt.log.writeln( ' ' + '사용법 : ' + 'cstone [Command] [Options...]'.bold );
	grunt.log.writeln();

	grunt.log.writeln( ' ' + 'Commands:'.yellow.underline );
	grunt.log.writeln();
	grunt.log.writetableln( [ 10, 40 ], [ '    init', '현재 디렉토리에 프로젝트의 기본 골격을 생성한다. 빈 디렉토리에서 실행해야 하며 다음 Option을 지정할 수 있다.'.grey ] );
	grunt.log.writetableln( [ 10, 22, 30 ], [ '        ', '--noamd', 'Require.js를 사용하지 않는다. 이 옵션이 없으면 Require.js와 Backbone을 사용하는 것으로 기본 골격을 생성한다.'.grey ] );
	grunt.log.writetableln( [ 10, 22, 30 ], [ '        ', '--theme:[dark/white]', 'Dark/White 테마 중 하나를 선택한다. 이 옵션이 없으면 Bootstrap의 기본 테마를 사용한다.'.grey ] );
	grunt.log.writetableln( [ 10, 22, 25 ], [ '        ', '--fullpackage', '코너스톤의 모든 패키지를 설치한다. 이 옵션이 없으면 기본적으로 필요한 최소한의 패키지만 설치한다.'.grey ] );
	grunt.log.writetableln( [ 10, 50 ], [ '        ', '사용 예) ' + 'cstone init --theme:white --fullpackage'.green ] );
	grunt.log.writetableln( [ 10, 40 ], [ '   build', '프로젝트의 소스 코드로부터 배포본을 생성한다. Gruntfile.js를 수정해서 최적화 옵션과 빌드 방법을 설정할 수 있다.'.grey ] );
	grunt.log.writetableln( [ 10, 40 ], [ '  server', '개발 중 Preview를 할 수 있는 간이 웹서버의 기능을 수행한다.'.grey ] );
	grunt.log.writetableln( [ 10, 40 ], [ '    test', '테스트 코드를 실행한다. 테스트 코드는 mocha-phantomjs를 사용해서 작성할 수 있다.'.grey ] );
	grunt.log.writeln();
}

var command, options = [];

_.each( process.argv, function( item, i ) {

	if ( i < 2 ) return true;

	if ( item.substr( 0, 2 ) == '--' )
		options.push( item );
	else {
		if ( command ) return false;
		command = item;
	}
} );

function copyFiles( rootdir, destdir ) {
	grunt.file.recurse( rootdir, function( abspath, rootdir, subdir, filename ) {
		grunt.file.copy( abspath, destdir + '/' + ( subdir || '' ) + '/' + filename );
	} );
}

function replaceFileContent( filename, pattern, replace ) {
	var data = fs.readFileSync( filename, { encoding: 'utf8' } );
	fs.writeFileSync( filename, data.replace( pattern, replace ), { encoding: 'utf8' } );
}

function doTask( command, options ) {

	if ( !command ) return false;

	if ( command == 'init' ) {
		// 빈 디렉토리인지 검사
		if ( grunt.file.expand( '*' ).length > 0 ) {
			grunt.log.errorlns( 'init 커맨드는 빈 디렉토리에서 실행해 주세요.' );
			return false;
		}

		// Option 검사
		for ( var i in options )
			if ( !_.contains( [ '--noamd', '--theme:dark', '--theme:white', '--fullpackage' ], options[ i ] ) ) {
				grunt.log.errorlns( '알 수 없는 옵션: ' + options[ i ] );
				return false;
			}

		if ( _.contains( options, '--noamd' ) ) {
			copyFiles( __dirname + '/../template/noamd', '.' );

			// 테마 적용
			if ( _.contains( options, '--theme:dark' ) ) {
				replaceFileContent( './src/package.json', '"backbone": "*"', '"backbone": "*",\r\n      "theme-dark": "*"' );
				replaceFileContent( './src/index.html', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>\r\n\t\t<link href="cornerstone/theme-dark/cornerstone.css" rel="stylesheet"/>' );
			}
			if ( _.contains( options, '--theme:white' ) ) {
				replaceFileContent( './src/package.json', '"backbone": "*"', '"backbone": "*",\r\n      "theme-white": "*"' );
				replaceFileContent( './src/index.html', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>\r\n\t\t<link href="cornerstone/theme-white/cornerstone.css" rel="stylesheet"/>' );
			}
		}
		else {
			copyFiles( __dirname + '/../template/amd', '.' );

			// 테마 적용
			if ( _.contains( options, '--theme:dark' ) ) {
				replaceFileContent( './src/package.json', '"bootstrap": "*",', '"bootstrap": "*",\r\n      "theme-dark": "*",' );
				replaceFileContent( './src/index.html', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>\r\n\t\t<link href="cornerstone/theme-dark/cornerstone.css" rel="stylesheet"/>' );
			}
			if ( _.contains( options, '--theme:white' ) ) {
				replaceFileContent( './src/package.json', '"bootstrap": "*",', '"bootstrap": "*",\r\n      "theme-white": "*",' );
				replaceFileContent( './src/index.html', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>', '<link href="cornerstone/bootstrap/css/bootstrap.min.css" rel="stylesheet"/>\r\n\t\t<link href="cornerstone/theme-white/cornerstone.css" rel="stylesheet"/>' );
			}
		}

		// 코너스톤 리파지토리를 기본으로 참조하도록 설정
		grunt.file.copy( __dirname + '/../template/.jamrc', '.jamrc' );

		// 모든 패키지를 설치하도록 설정
		if ( _.contains( options, '--fullpackage' ) )
			grunt.file.copy( __dirname + '/../template/fullpackage/package.json', './src/package.json' );

		grunt.log.oklns( '기본 파일들이 모두 생성되었습니다.' );
		grunt.log.oklns( '필요한 라이브러리들을 내려받고 있습니다. 이 작업은 시간이 좀 걸릴 수 있습니다.' );

		var c1 = cp.exec( 'npm install', function( err, stdout, stderr ) {

			var c2 = cp.exec( 'jam install', { cwd: './src' }, function( err, stdout, stderr ) {
				grunt.log.oklns( '라이브러리를 모두 내려받았습니다.' );
			} );

			c2.stdin.setEncoding( 'utf-8' );
			c2.stdout.pipe( process.stdout );
		} );

		c1.stdin.setEncoding( 'utf-8' );
		c1.stdout.pipe( process.stdout );

		return true;
	}

	grunt.cli();

	return true;
}

if ( !doTask( command, options ) ) return displayHelp();
